<?php

namespace GD\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;
use GD\AdminBundle\Entity\Offer;

/**
 * MerchantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MerchantRepository extends EntityRepository
{
    protected $typeConstantMap = array(
        'cashback' => Offer::OFFER_TYPE_CASHBACK,
        'full-reimbursement' => Offer::OFFER_TYPE_FULL_REIMBURSEMENT,
        'code-promo' => Offer::OFFER_TYPE_CODE_PROMO,
        'subscription-gain' => Offer::OFFER_TYPE_SUBSCRIPTION_GAIN,
    );

    protected $sortByFieldMap = array(
        'cashback-amount' => 'cashbackValueAmount',
        'cashback-percentage' => 'cashbackValuePercentage',
        'start-date' => 'startDate',
        'name' => 'name'
    );

    protected $specialEuropeanCharacterMap = array(
        'a' => array('æ'),
        'o' => array('œ', 'ø'),
    );

    private function getQueryWithoutSearchKey($filter, $type, $user)
    {
        //decide the subquery based on the filter
        if ('offer' == $filter) {
            $typeConstant = $this->typeConstantMap[$type];
            $subQuery = 'SELECT m1.id FROM GD\AdminBundle\Entity\Merchant m1 JOIN m1.offers o1 WITH o1.isCurrent = true AND o1.isArchived = false AND o1.startDate <= CURRENT_DATE() AND o1.endDate >= CURRENT_DATE() AND o1.type = '.$typeConstant;
        } elseif ('category' == $filter) {
            $subQuery = 'SELECT m1.id FROM GD\AdminBundle\Entity\Merchant m1 JOIN m1.offers o1 WITH o1.isCurrent = true AND o1.isArchived = false AND m1.id IN(SELECT m2.id FROM GD\AdminBundle\Entity\Category c INNER JOIN c.merchants m2 WITH c.slug = \''.$type.'\')';
        } elseif ('tag' == $filter) {
            $subQuery = 'SELECT m1.id FROM GD\AdminBundle\Entity\Merchant m1 JOIN m1.offers o1 WITH o1.isCurrent = true AND o1.isArchived = false AND m1.id IN(SELECT m2.id FROM GD\AdminBundle\Entity\Tag t INNER JOIN t.merchants m2 WITH t.slug = \''.$type.'\')';
        } elseif ('list' == $filter) {
            if ('new' == $type) {
                $subQuery = 'SELECT m1.id FROM GD\AdminBundle\Entity\MerchantList l JOIN l.merchants m1 WITH l.name = \'new-merchants\' GROUP BY m1.id';
            } elseif ('top' == $type) {
                $subQuery = 'SELECT m1.id FROM GD\AdminBundle\Entity\MerchantList l JOIN l.merchants m1 WITH l.name = \'top-merchants\' GROUP BY m1.id';
            } elseif ('private' == $type) {
                $subQuery = 'SELECT m1.id FROM GD\AdminBundle\Entity\MerchantList l JOIN l.merchants m1 WITH l.name = \'private-merchants\' GROUP BY m1.id';
            } elseif ('preferred' == $type) {
                $subQuery = 'SELECT m1.id FROM GD\AdminBundle\Entity\User u JOIN u.preferredMerchants m1 WITH u.id = '.$user->getId().' GROUP BY m1.id';
            }
        } elseif ('search' == $filter) {
            $subQuery = 'SELECT m1.id FROM GD\AdminBundle\Entity\Merchant m1 WHERE m1.id IN ('.$type.')';
        }

        $query = 'SELECT m,o FROM GD\AdminBundle\Entity\Merchant m JOIN m.offers o WHERE m.isActive = true AND m.isArchived = false AND o.merchant IN ('.$subQuery.')';
        
        return $query;
    }

    /**
     * This function returns the query for the pagination service to execute.
     * @param $filter
     * @param $type
     * @param $searchKey
     * @param $sortBy
     * @param $user
     * @return \Doctrine\ORM\Query
     */
    public function getActiveMerchantsQuery($filter, $type, $searchKey, $sortBy, $user)
    {
        $query = $this->getQueryWithoutSearchKey($filter, $type, $user);

        if ($searchKey) {
            if('0-9' === $searchKey) {
                $query .= ' AND m.name LIKE \'0%\'';
                foreach(array('1','2','3','4','5','6','7','8','9') as $i) {
                    $query .= ' OR m.name LIKE \''.$i.'%\'';
                }
            } else {
                $query .= ' AND m.name LIKE \''.$searchKey.'%\'';
            }
            
            if (isset($this->specialEuropeanCharacterMap[$searchKey])) {
                foreach ($this->specialEuropeanCharacterMap[$searchKey] as $key)
                $query .= ' OR m.name LIKE \''.$key.'%\'';
            }
        }

        //Sort the results by sortBy and merchantId
        $sortByField = $this->sortByFieldMap[$sortBy];
        if ('name' === $sortByField) {
            $query .= ' ORDER BY m.'.$sortByField.' ASC';
        } else {
            $query .= ' ORDER BY o.'.$sortByField.' DESC';
        }

        return $this->getEntityManager()->createQuery($query);
    }

    /**
     * Convert accented characters to English equivalent
     * @param $filter
     * @param $type
     * @param $user
     * @return array
     */
    public function getActiveMerchantsCharacterMap($filter, $type, $user)
    {
        $queryString = $this->getQueryWithoutSearchKey($filter, $type, $user);
        $query = $this->getEntityManager()->createQuery($queryString);
        $merchants = $query->getResult();

        $availableMerchantsCharacterMap = array();
        foreach ($merchants as $merchant) {
            $translatedMerchantName = \Zend\Search\lib\SearchUtility::replaceSpecialAlphabets(mb_strtolower($merchant->getName(), 'UTF-8'));
            $firstChar = substr($translatedMerchantName, 0, 1);
            $availableMerchantsCharacterMap[] = (in_array($firstChar, array('0','1','2','3','4','5','6','7','8','9')))? '0-9' : $firstChar;
        }

        return $availableMerchantsCharacterMap;
    }
}
